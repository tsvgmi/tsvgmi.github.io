:css
  @media (min-width: 1024px) {
    .lyric {
      line-height: 1.5;
      column-count: 2;
      text-align: center;
      font-size: 120%;
    }
  }
  .chord {
    color: #4aa;
    vertical-align: 20px;
    display: inline-block;
    font-weight: 400;
    font-size: 80%;
    max-width: 15px;
    cursor: pointer;
    font-family: "Helvetica Narrow","Arial Narrow",Tahoma,Arial,Helvetica,sans-serif;
  }
  hr {
    margin-top: 0;
    margin-bottom: 0;
    width: 50%;
    border-width: 3px;
  }
  .simage {
    position: absolute;
    opacity:  0.3;
  }
  .perf-note {
    font-size: 120%;
    font-family: "Helvetica Narrow","Arial Narrow",Tahoma,Arial,Helvetica,sans-serif;
    background-color: #ffe;
  }
  .song_header {
    margin-top: 1em;
    border-top: 6px solid #888;
    border-bottom: 1px solid #ccc;
  }
  audio:hover, audio:focus, audio:active {
    -webkit-box-shadow: 15px 15px 20px rgba(0,0, 0, 0.4);
    -moz-box-shadow: 15px 15px 20px rgba(0,0, 0, 0.4);
    box-shadow: 15px 15px 20px rgba(0,0, 0, 0.4);
    -webkit-transform: scale(1.05);
    -moz-transform: scale(1.05);
    transform: scale(1.05);
  }
  audio {
    -webkit-transition:all 0.5s linear;
    -moz-transition:all 0.5s linear;
    -o-transition:all 0.5s linear;
    transition:all 0.5s linear;
    -moz-box-shadow: 2px 2px 4px 0px #006773;
    -webkit-box-shadow:  2px 2px 4px 0px #006773;
    box-shadow: 2px 2px 4px 0px #006773;
    -moz-border-radius:7px 7px 7px 7px ;
    -webkit-border-radius:7px 7px 7px 7px ;
    border-radius:7px 7px 7px 7px ;
  }

.row
  .col-md-9
    %h2
      List:
      %a(href="/playorder/#{list_info[:id]}" target='list_edit')
        %i.fa.fa-edit
      - link = "https://test.hopamchuan.com/playlist/v/#{list_info[:id]}"
      %a(href=link target='hopamchuan')= "#{list_info[:name]}"
      = "(#{list_info['username']})"
  .col-md-3
    %form
      %select.form-control(name="listno" onchange="this.form.submit()")
        - playlists.each do |plinfo|
          - selected = params[:listno].to_i == plinfo[:id]
          %option{value:"#{plinfo[:id]}", selected:selected}= "#{plinfo[:name][0..39]} [#{plinfo[:_total_song_count]}]"

- videos = []
-# Plog.dump_info(perf_info:perf_info)
- song_list.each_with_index do |sinfo, row_no|
  - oinfo   = order_list[sinfo[:song_id]] || {}
  - hs      = sinfo[:href].split('/')
  - sname   = hs[5]
  - version = oinfo[:version]
  - link = sinfo[:href]
  - if version && !version.empty?
    - link += "/#{version}"
  - lyric_id = "row_#{row_no}"
  .row.song_header
    .col-6
      %h4
        %a(href=link target='hopamchuan')= sinfo[:name]
        %button.pull-right.btn.btn-primary(type='button' role='button' data-toggle='collapse' href="##{lyric_id}" aria-expanded='false' aria-controls=lyric_id)
          Toggle Lyric
      = sinfo[:author]
    .col.md
      = sinfo[:artist]
    .col.md
      - singer = oinfo[:singer]
      = singer
      .pull-right= oinfo[:singer_key]
    .col.md
      %a(href="/song-style/#{user}/#{sinfo[:song_id]}/#{sname}" target='song_edit')
        %i.fa.fa-edit
      = oinfo[:style]
      .pull-right= oinfo[:tempo]
  %div.collapse(id=lyric_id)
    .row
      -# Plog.dump_info(sname:sname, perf_note:perf_info[sname])
      - if oinfo[:ytvid]
        .col
          -# For youtube video #{sname}
          - oinfo[:ytoffset].each_slice(2) do |ytstart, ytend|
            - vid = "v_#{sname}_#{ytstart}"
            %div(id=vid)
            - videos << {vid:vid, video:oinfo[:ytvid], start:ytstart.to_i, end:ytend.to_i}
      - if perf_note = perf_info[sname]
        .col
          = perf_note[:instrument]
        .col
          - intro = perf_note[:intro]
          - if intro
            - offset = key_offset(perf_note[:key], oinfo[:singer_key])
            - tlyric = ListHelper.transpose_lyric(intro, offset, tokey:oinfo[:singer_key], cclass:'chord_intro')
            = tlyric.gsub(/\n/, '<br>')
    .row
      .col
        - lyric = sinfo[:lyric]
        - offset = key_offset(sinfo[:song_key], oinfo[:singer_key])
        - tlyric = ListHelper.transpose_lyric(lyric, offset, tokey:oinfo[:singer_key])
        - tlyric = tlyric.sub(/^.*==/m, '')
        .lyric= tlyric.gsub(/\s*\r/, '').gsub(/^---/, '<hr/>').gsub(/\n/, "<br/>\n")

-#= videos.inspect
- content_for :javascript do
  %script(src="https://www.youtube.com/iframe_api")
  :javascript
    $(document).ready(function() {
      $('.a-tooltip').tooltip({"html":true}); 
    });

    var videos     = #{videos.to_json};
    var cur_player = null;
    function onYouTubeIframeAPIReady() {
      for (var i = 0; i < videos.length; i++) {
        var cur_video = videos[i];
        var avideo    = cur_video['video'];
        var vid       = cur_video['vid'];
        var start = cur_video['start']; var end = cur_video['end'];
        var player    = new YT.Player(vid, {
          height: '150',
          width:  '300',
          playerVars: {autoplay:0, start:start, end:end},
          videoId: avideo,
          events: {
            'onStateChange': function(event){
              var mplayer = event.target
              if (event.data == 0) {
                mdata  = mplayer.b.b;
                start  = mdata['playerVars']['start'];
                console.log(mdata);
                console.log('Restarting ' + mdata['videoId'] + ' ' + start);
                mplayer.seekTo(start);
                cur_player = mplayer.playVideo();
              }
            }
          }
        });
      }
    }
