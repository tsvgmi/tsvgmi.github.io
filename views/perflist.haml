:css
  @media (min-width: 1024px) {
    .lyric {
      line-height: 1.5;
      column-count: 2;
      text-align: center;
      font-size: 120%;
    }
  }
  .chord {
    color: #4aa;
    vertical-align: 20px;
    display: inline-block;
    font-weight: 400;
    font-size: 80%;
    max-width: 15px;
    cursor: pointer;
    font-family: "Helvetica Narrow","Arial Narrow",Tahoma,Arial,Helvetica,sans-serif;
  }
  hr {
    margin-top: 0;
    margin-bottom: 0;
    width: 50%;
    border-width: 3px;
  }
  .simage {
    position: absolute;
    opacity:  0.3;
  }
  .perf-note {
    font-size: 90%;
    font-family: "Helvetica Narrow","Arial Narrow",Tahoma,Arial,Helvetica,sans-serif;
    background-color: #ffe;
  }
  audio:hover, audio:focus, audio:active {
    -webkit-box-shadow: 15px 15px 20px rgba(0,0, 0, 0.4);
    -moz-box-shadow: 15px 15px 20px rgba(0,0, 0, 0.4);
    box-shadow: 15px 15px 20px rgba(0,0, 0, 0.4);
    -webkit-transform: scale(1.05);
    -moz-transform: scale(1.05);
    transform: scale(1.05);
  }
  audio {
    -webkit-transition:all 0.5s linear;
    -moz-transition:all 0.5s linear;
    -o-transition:all 0.5s linear;
    transition:all 0.5s linear;
    -moz-box-shadow: 2px 2px 4px 0px #006773;
    -webkit-box-shadow:  2px 2px 4px 0px #006773;
    box-shadow: 2px 2px 4px 0px #006773;
    -moz-border-radius:7px 7px 7px 7px ;
    -webkit-border-radius:7px 7px 7px 7px ;
    border-radius:7px 7px 7px 7px ;
  }

.row
  .col-md-9
    %h2
      List:
      %a(href="/playorder/#{list_info[:id]}" target='list_edit')
        %i.fa.fa-edit
      - link = "https://test.hopamchuan.com/playlist/v/#{list_info[:id]}"
      %a(href=link target='hopamchuan')= "#{list_info[:title]}"
      = "(#{list_info['username']})"
  .col-md-3
    %form
      %select.form-control(name="listno" onchange="this.form.submit()")
        - playlists.each do |plinfo|
          - selected = params[:listno].to_i == plinfo[:id]
          %option{value:"#{plinfo[:id]}", selected:selected}= "#{plinfo[:title][0..39]} [#{plinfo[:_total_song_count]}]"

- videos = []
%table.table.table-condensed.table-bordered.table-striped
  %thead
    %tr
      %th Song Name
      %th Artist(s)
      %th Singer
      %th Style
  %tbody
    - song_list.each_with_index do |sinfo, row_no|
      - oinfo   = order_list[sinfo[:song_id]] || {}
      - Plog.dump_info(oinfo:oinfo)
      - sname   = sinfo[:song_ascii].gsub(/[ ']/, '-')
      - version = sinfo[:username]
      - if version && !version.empty?
        - link = "https://test.hopamchuan.com/song/#{sinfo[:song_id]}/#{sname}/#{version}"
      - else
        - link = "https://test.hopamchuan.com/song/#{sinfo[:song_id]}/#{sname}"
      - lyric_id = "row_#{row_no}"
      %tr
        %td
          %h4
            %a.a-tooltip(data-toggle="collapse" href="##{lyric_id}" aria-expanded="false" aria-controls=lyric_id title='Toggle Lyric')
              %i.fa.fa-search
            %a(href=link target='hopamchuan')= sinfo[:song_name]
            %a.pull-right.a-tooltip(data-toggle="collapse" href="##{lyric_id}" aria-expanded="false" aria-controls=lyric_id title='Toggle Lyric')
              %i.fa.fa-search
          = JSON.parse(sinfo[:authors]).map {|r| r['name']}.join(', ')
        %td
          - if aset = artist_set[sinfo[:song_id]]
            %ul.list-unstyled
              - aset.each do |r|
                %li
                  - if link = r[:link]
                    %a(href=link target='playsong')= "#{r[:artist]} (#{r[:key]})"
                  - else
                    = "#{r[:artist]} (#{r[:key]})"
        %td
          - singer = oinfo[:singer]
          = singer
          .pull-right= oinfo[:singer_key]
        %td
          %a(href="/song-style/#{user}/#{sinfo[:song_id]}/#{sname}" target='song_edit')
            %i.fa.fa-edit
          = oinfo[:style]
          .pull-right= oinfo[:tempo]
      %tr.collapse(id=lyric_id)
        %td(colspan=3)
          - if sprofile = singer_profiles[singer]
            %img.simage(src="http://graph.facebook.com/#{sprofile[:fbid]}/picture?type=normal")
          - lyric = sinfo[:lyric]
          - offset = key_offset(sinfo[:song_key], oinfo[:singer_key])
          - tlyric = ListHelper.transpose_lyric(lyric, offset, tokey:oinfo[:singer_key])
          - tlyric = tlyric.sub(/^.*==/m, '')
          .lyric= tlyric.gsub(/\s*\r/, '').gsub(/^---/, '<hr/>').gsub(/\n/, "<br/>\n")
        %td.perf-note(width="20%")
          - if perf_note = perf_info[sname]
            %p= perf_note[:instrument]
            %p
              - intro = perf_note[:intro]
              - if intro
                - offset = key_offset(perf_note[:key], oinfo[:singer_key])
                - tlyric = ListHelper.transpose_lyric(intro, offset, tokey:oinfo[:singer_key])
                = tlyric.gsub(/\n/, '<br>')
          %hr/
          - if oinfo[:ytvid]
            - vid = 'v_' + sname
            %div(id=vid)
              For youtube video #{vid}
              - videos << {vid:vid, video:oinfo[:ytvid], start:oinfo[:ytstart], end:oinfo[:ytend]}
          - else
            %a(href="/fragment_upload/#{list_info['username']}/#{sinfo[:song_id]}/#{sname}" target='upload' title='Upload music fragment')
              %i.fa.fa-upload
            - %w(intro p0 p1 solo out).each do |segment|
              - sfile = "audio/#{list_info['username']}/#{segment}-#{sname}.mp3"
              - next unless test(?f, sfile)
              %audio(controls loop)
                - spath = "/#{sfile}"
                %source(src=spath)

- content_for :javascript do
  %script(src="https://www.youtube.com/iframe_api")
  :javascript
    $(document).ready(function() {
      $('.a-tooltip').tooltip({"html":true}); 
    });

    var videos     = #{videos.to_json};
    var cur_player = null;
    function onYouTubeIframeAPIReady() {
      for (var i = 0; i < videos.length; i++) {
        var cur_video = videos[i];
        console.log(cur_video);
        var avideo    = cur_video['video'];
        var vid       = cur_video['vid'];
        var start = cur_video['start']; var end = cur_video['end'];
        var player = new YT.Player(vid, {
          height: '100',
          width:  '150',
          playerVars: {autoplay:0, start:start, end:end},
          videoId: avideo,
          events: {
            'onStateChange': function(event){
              var mplayer = event.target
              if (event.data == 0) {
                avideo = mplayer.b.b['videoId']
                console.log(mplayer.b.b);
                console.log('Restarting ' + avideo);
                mplayer.seekTo(start);
                //if (cur_player) {
                  //cur_player.stopVideo();
                //}
                cur_player = mplayer.playVideo();
              }
            }
          }
        });
      }
    }
