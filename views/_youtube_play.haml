- content_for :javascript do
  %script(src="https://www.youtube.com/iframe_api")
  :javascript
    var videos     = #{videos.to_json};
    var cur_player = null;
    var players    = [];

    function pe_toggle_chord(button) {
      var lyric_id = button.getAttribute('data-lyric-id');
      $('#' + lyric_id + ' .chord').toggle();
    }

    function pe_playVideo(button) {
      var lyric_id = button.getAttribute('data-lyric-id');
      var main_id  = button.getAttribute('data-main-id');
      var vindex   = button.getAttribute('data-vindex');
      console.log('play video ' + vindex + ' + ' + lyric_id);

      if (vindex >= 0) {
        players[vindex].playVideo();
      }
      $('.pl_collapse').collapse('hide');
      $('#' + lyric_id).collapse('show');
      $('#' + main_id)[0].scrollIntoView(true);
    }

    function pe_transpose(button, offset) {
      var lyric_id = button.getAttribute('data-lyric-id');
      console.log('lyric: ' + lyric_id + ' offset: ' + offset);
      var elem = document.getElementById(lyric_id);
      var ctext;
      $('#' + lyric_id + ' .chord').each(function(index) {
        ctext = $(this).html();
        console.log(index + ':' + $(this).html());
        $(this).html(ctext + ".1");
      })
    }

    /*
    function transpose_mkey(keys, offset, options) {
      var output = [];
      var bkey, mod;
      # Incase key is specified as chord/bass.  We transpose both
      keys.split('/').forEach(function(key) {
        # Extract base key and mod (sharp/flat)
        if (key[1].match(/[#b]/)) {
          bkey = key.substr(0, 2);
          mod  = key.substr(2, key.length).trim();
        } else {
          bkey = key[0]
          mod  = key.substr(1, key.length).trimp();
        }
        # Order of key (0-11)
        bofs = KeyPos.index{|k| bkey.match(/^#\{k}$/}
        if bofs
          # Calculate target key
          tkey  = KeyPos[(bofs+offset) % 12]
          # Select alternate notations (sharp or flat)
          tkeys = tkey. split('|')
          if options[:flat]
            output << tkeys[-1]+mod
          else
            output << tkeys[0]+mod
          end
        else
          Plog.error("Does not know how to transpose " + key);
          output << key
        end
      end
      output.compact.join('/')
    end
    */

    function stopAllExcept(videoId) {
      var vid;
      var player;
      for (var i = 0; i < players.length; i++) {
        player = players[i];
        vid    = player.getVideoData().video_id;
        if (vid != videoId) {
          if (player.getPlayerState() == 1) {
            console.log("Stop " + videoId + " " + vid + " " + player.getPlayerState());
            player.stopVideo();
          }
        }
      }
    }

    function onYouTubeIframeAPIReady() {
      for (var i = 0; i < videos.length; i++) {
        var cur_video = videos[i];
        var avideo    = cur_video['video'];
        var vid       = cur_video['vid'];
        var start     = cur_video['start'];
        var end       = cur_video['end'];
        var player    = new YT.Player(vid, {
          height: '140',
          width:  '100%',
          playerVars: {"autoplay":0, "start":start, "end":end,
                       "origin":"https://www.youtube.com"},
          videoId: avideo,
          playsinline: true,
          events: {
            'onStateChange': function(event){
              var mplayer = event.target
              var mdata   = mplayer.b.b;
              if (event.data == 0) {
                start  = mdata['playerVars']['start'];
                console.log(mdata);
                console.log('Restarting ' + mdata['videoId'] + ' ' + start);
                mplayer.seekTo(start);
                cur_player = mplayer.playVideo();
              }
              if (event.data == 1) {
                console.log('Start ' + mdata['videoId'] + ' ' + event.data);
                stopAllExcept(mdata['videoId']);
              }
            }
          }
        });
        players.push(player);
      }
    }
